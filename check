#!/usr/bin/env python
#-*- coding:utf-8 -*-

import os
import sys
import json
import time
import logging
import requests
import ansible.runner


class cl:
    """
    Color

    """

    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'

def multi_run():
    """
    Ansible Runner 1.9

    """

    global IPFILE
    if 'module_name' not in dir():
        module_name = "script"
    if 'module_args' not in dir():
        module_args = SCRIPT


    runner = ansible.runner.Runner(host_list = IPFILE,
                                    module_name = module_name,
                                    module_args = module_args,
                                    pattern = "",
                                    forks = 50,
                                    become = "True",
                                    timeout = 3
                                    )
    data = runner.run()
    return(data)

def write_log(data):
    """
    Recoring Logs

    """
    global LOGPATH
    global LOGLEVEL
    ident=' '
    logging.basicConfig(level=LOGLEVEL,
                        format='%(asctime)s %(levelname)-4s %(message)s',
                        datefmt='%Y-%m-%d %H:%M:%S',
                        filename=LOGPATH + '/multi_exec.log',
                        filemode='a'
                        )
    with open(SCRIPT, 'r') as f:
        content = '\n' + ident*4 + 'Command:\n'
        for cmd in f.readlines():
            if not cmd.startswith('#'):
                content += ident*8 + cmd
    content += ident*4 + 'Result:\n'
    for status, res in data.items():
        content += ident*8 + status + ':\n'
        for ip, value in res.items():
            content += ident*12 + ip + ':\n'
            content += ident*16 + value.replace('\r\n', '\n'+ident*16) + '\n'
    logging.info(content)

def process(data):
    """
    Analysis return
    """
    if type(data) is dict:
        res = {}
        if data['dark']:
            ret = {}
            print cl.FAIL + "Failure:" + cl.ENDC
            for k,v in data['dark'].items():
                ret[k] = v['msg'].strip()
            res['Failure'] = ret
            print json.dumps(res['Failure'], indent=4).replace('\\r\\n','\n\t\t')
        if data['contacted']:
            ret = {}
            print cl.OKBLUE + "Success:" + cl.ENDC
            for k,v in data['contacted'].items():
                ret[k] = v['stdout'].strip()
            res['Success'] = ret
            print json.dumps(res['Success'], indent=4).replace("\\r\\n","\n\t\t")
    return res

def re_confirm():
    """
    Can add confirm module in re-development
    """
    sys.exit(0)


if __name__ == '__main__':
    if len(sys.argv) == 3:
        PRIKEY=''
        LOGPATH='./'
        LOGLEVEL=''
        SCRIPT=sys.argv[1]
        IPFILE=sys.argv[2]
        #re_confirm()
        data = multi_run()
        final = process(data)
        write_log(final)
    else:
        print cl.WARNING + "Usage: ./check.py command.sh ip.list" + cl.ENDC
        sys.exit(1)

